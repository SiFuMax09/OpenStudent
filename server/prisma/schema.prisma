// OpenStudent - Prisma Schema
// Complete database schema for the student planner platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  role         UserRole @default(STUDENT)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  classMemberships  ClassMembership[]
  createdClasses    Class[]           @relation("ClassCreator")
  tasks             Task[]
  notes             Note[]
  uploadedFiles     File[]
  gradeEntries      GradeEntry[]
  gradedBy          GradeEntry[]      @relation("GradedBy")
  createdCalendarEvents CalendarEvent[]
  refreshTokens     RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

// ============================================
// CLASS & COURSE MANAGEMENT
// ============================================

model Class {
  id             String   @id @default(uuid())
  name           String
  description    String?
  academicYearId String?  @map("academic_year_id")
  createdById    String   @map("created_by_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  academicYear    AcademicYear?     @relation(fields: [academicYearId], references: [id], onDelete: SetNull)
  createdBy       User              @relation("ClassCreator", fields: [createdById], references: [id], onDelete: Cascade)
  members         ClassMembership[]
  courses         Course[]
  tasks           Task[]
  notes           Note[]
  files           File[]
  calendarEvents  CalendarEvent[]

  @@index([academicYearId])
  @@index([createdById])
  @@map("classes")
}

enum ClassRole {
  STUDENT
  TEACHER
}

model ClassMembership {
  id       String    @id @default(uuid())
  userId   String    @map("user_id")
  classId  String    @map("class_id")
  role     ClassRole @default(STUDENT)
  joinedAt DateTime  @default(now()) @map("joined_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@unique([userId, classId])
  @@index([userId])
  @@index([classId])
  @@map("class_memberships")
}

enum CourseType {
  CORE
  ELECTIVE
}

model Course {
  id          String     @id @default(uuid())
  classId     String     @map("class_id")
  name        String
  description String?
  type        CourseType @default(CORE)
  credits     Int?
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")

  // Relations
  class          Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  tasks          Task[]
  calendarEvents CalendarEvent[]
  gradeItems     GradeItem[]

  @@index([classId])
  @@map("courses")
}

// ============================================
// TASKS & HOMEWORK
// ============================================

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Task {
  id          String        @id @default(uuid())
  title       String
  description String?
  dueDate     DateTime?     @map("due_date")
  priority    TaskPriority  @default(MEDIUM)
  status      TaskStatus    @default(TODO)
  isShared    Boolean       @default(false) @map("is_shared")
  classId     String?       @map("class_id")
  courseId    String?       @map("course_id")
  userId      String        @map("user_id")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  deletedAt   DateTime?     @map("deleted_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  class  Class?  @relation(fields: [classId], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  files  File[]

  @@index([userId])
  @@index([classId])
  @@index([courseId])
  @@index([updatedAt])
  @@map("tasks")
}

// ============================================
// NOTES
// ============================================

model Note {
  id              String    @id @default(uuid())
  title           String
  contentMarkdown String    @map("content_markdown") @db.Text
  tags            String[]  @default([])
  isShared        Boolean   @default(false) @map("is_shared")
  classId         String?   @map("class_id")
  userId          String    @map("user_id")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  class Class? @relation(fields: [classId], references: [id], onDelete: Cascade)
  files File[]

  @@index([userId])
  @@index([classId])
  @@index([tags])
  @@map("notes")
}

// ============================================
// FILE STORAGE
// ============================================

model File {
  id           String   @id @default(uuid())
  filename     String
  mimeType     String   @map("mime_type")
  size         Int
  minioKey     String   @unique @map("minio_key")
  checksum     String?
  uploadedById String   @map("uploaded_by_id")
  classId      String?  @map("class_id")
  taskId       String?  @map("task_id")
  noteId       String?  @map("note_id")
  eventId      String?  @map("event_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  uploadedBy User           @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  class      Class?         @relation(fields: [classId], references: [id], onDelete: Cascade)
  task       Task?          @relation(fields: [taskId], references: [id], onDelete: SetNull)
  note       Note?          @relation(fields: [noteId], references: [id], onDelete: SetNull)
  event      CalendarEvent? @relation(fields: [eventId], references: [id], onDelete: SetNull)

  @@index([uploadedById])
  @@index([classId])
  @@index([taskId])
  @@index([noteId])
  @@index([eventId])
  @@map("files")
}

// ============================================
// CALENDAR & EVENTS
// ============================================

enum EventType {
  CLASS_SESSION
  EXAM
  ASSIGNMENT_DUE
  STUDY_SESSION
  OTHER
}

model CalendarEvent {
  id             String    @id @default(uuid())
  title          String
  description    String?
  startTime      DateTime  @map("start_time")
  endTime        DateTime  @map("end_time")
  type           EventType @default(OTHER)
  recurrenceRule String?   @map("recurrence_rule")
  classId        String?   @map("class_id")
  courseId       String?   @map("course_id")
  createdById    String    @map("created_by_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  // Relations
  class     Class?  @relation(fields: [classId], references: [id], onDelete: Cascade)
  course    Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  createdBy User    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  files     File[]

  @@index([classId])
  @@index([courseId])
  @@index([createdById])
  @@index([startTime])
  @@map("calendar_events")
}

// ============================================
// GRADING SYSTEM
// ============================================

enum GradeSchemaType {
  GERMAN    // 1.0 - 6.0
  US        // A-F with GPA
  UK        // 0-100%
  CUSTOM    // Admin-defined
}

model GradeSchema {
  id         String          @id @default(uuid())
  name       String
  type       GradeSchemaType
  configJson Json            @map("config_json")
  isActive   Boolean         @default(true) @map("is_active")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  // Relations
  gradeItems GradeItem[]

  @@map("grade_schemas")
}

model GradeItem {
  id            String   @id @default(uuid())
  courseId      String   @map("course_id")
  gradeSchemaId String   @map("grade_schema_id")
  name          String
  description   String?
  weight        Float    @default(1.0)
  maxPoints     Float    @map("max_points")
  dueDate       DateTime? @map("due_date")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  gradeSchema GradeSchema   @relation(fields: [gradeSchemaId], references: [id], onDelete: Cascade)
  gradeEntries GradeEntry[]

  @@index([courseId])
  @@index([gradeSchemaId])
  @@map("grade_items")
}

model GradeEntry {
  id          String    @id @default(uuid())
  gradeItemId String    @map("grade_item_id")
  userId      String    @map("user_id")
  score       Float
  gradeValue  String?   @map("grade_value")
  comments    String?
  gradedById  String    @map("graded_by_id")
  gradedAt    DateTime  @default(now()) @map("graded_at")

  // Relations
  gradeItem GradeItem @relation(fields: [gradeItemId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gradedBy  User      @relation("GradedBy", fields: [gradedById], references: [id], onDelete: Cascade)

  @@unique([gradeItemId, userId])
  @@index([gradeItemId])
  @@index([userId])
  @@index([gradedById])
  @@map("grade_entries")
}

// ============================================
// ACADEMIC CALENDAR
// ============================================

model AcademicYear {
  id        String   @id @default(uuid())
  name      String   @unique
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  isCurrent Boolean  @default(false) @map("is_current")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  segments AcademicSegment[]
  classes  Class[]

  @@map("academic_years")
}

enum SegmentType {
  SEMESTER
  TRIMESTER
  QUARTER
  HALF_YEAR
}

model AcademicSegment {
  id             String      @id @default(uuid())
  academicYearId String      @map("academic_year_id")
  name           String
  type           SegmentType
  startDate      DateTime    @map("start_date")
  endDate        DateTime    @map("end_date")
  sequenceNumber Int         @map("sequence_number")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  // Relations
  academicYear AcademicYear @relation(fields: [academicYearId], references: [id], onDelete: Cascade)

  @@unique([academicYearId, sequenceNumber])
  @@index([academicYearId])
  @@map("academic_segments")
}
