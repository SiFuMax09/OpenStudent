version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16.3-alpine
    container_name: openstudent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-openstudent}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-your-secure-password}
      POSTGRES_DB: ${POSTGRES_DB:-openstudent}
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - openstudent-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-openstudent}']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7.2.5-alpine
    container_name: openstudent-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-your-redis-password}
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    networks:
      - openstudent-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2024-07-11T18-01-28Z
    container_name: openstudent-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password123}
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio-data:/data
    networks:
      - openstudent-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO Client - Create bucket on startup
  minio-init:
    image: minio/mc:latest
    container_name: openstudent-minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER:-admin} ${MINIO_ROOT_PASSWORD:-password123};
      mc mb myminio/${MINIO_BUCKET_NAME:-openstudent-files} --ignore-existing;
      mc anonymous set download myminio/${MINIO_BUCKET_NAME:-openstudent-files};
      exit 0;
      "
    networks:
      - openstudent-network

  # Backend API (NestJS)
  api:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    container_name: openstudent-api
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-openstudent}:${POSTGRES_PASSWORD:-your-secure-password}@postgres:5432/${POSTGRES_DB:-openstudent}?schema=public
      REDIS_URL: redis://:${REDIS_PASSWORD:-your-redis-password}@redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-password123}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-openstudent-files}
      MINIO_USE_SSL: 'false'
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_ACCESS_TOKEN_EXPIRY: ${JWT_ACCESS_TOKEN_EXPIRY:-15m}
      JWT_REFRESH_TOKEN_EXPIRY: ${JWT_REFRESH_TOKEN_EXPIRY:-7d}
      NODE_ENV: development
      API_PORT: 3000
    ports:
      - '3000:3000'
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - openstudent-network
    command: npm run start:dev

  # Web Application (Next.js)
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: openstudent-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3000
      NEXTAUTH_URL: http://localhost:3001
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-key-change-this}
      NODE_ENV: development
    ports:
      - '3001:3000'
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    networks:
      - openstudent-network
    command: npm run dev

networks:
  openstudent-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  minio-data:
    driver: local
